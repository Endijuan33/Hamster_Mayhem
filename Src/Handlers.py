import asyncio
import re

from Src.Colors import *
from Src.Accounts import choose_account
from Src.Generators import genetare_for_all_games, generate_for_game
from Src.Login import hamster_client
from Src.Menu import main_menu, playground_menu, minigames_menu
from Src.Settings import load_settings, save_settings
from Src.utils import line_after, line_before, get_games_data, spinners_table

settings = load_settings()


def handle_main_menu_choice(choice):
    if choice == '#':
        line_before()
        print(hamster_client().daily_info())

    elif choice == '1':
        line_before()
        hamster_client().complete_taps()

    elif choice == '2':
        line_before()
        hamster_client().complete_daily_tasks()

    elif choice == '3':
        line_before()
        hamster_client().complete_daily_chipher()

    elif choice == '4':
        line_before()
        upgrades_info = hamster_client()._collect_upgrades_info()
        if all(card['available'] for card in upgrades_info['cards']):
            hamster_client().complete_daily_combo()
        else:
            choice = input(f"–°–µ–≥–æ–¥–Ω—è –Ω–µ –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã!\n–•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ? Y(–¥–∞) / Enter(–Ω–µ—Ç): ")
            if str(choice.lower()) == 'y'.lower():
                hamster_client().complete_daily_combo(buy_anyway=True)

    elif choice == '5':
        line_before()
        handle_minigames_choice()

    elif choice == '6':
        line_before()
        handle_playground_menu_choice()

    elif choice == 'a':
        line_before()
        account = choose_account()
        settings['account'] = account
        save_settings(settings)
        hamster_client().login()

    elif choice == '$':
        line_before()
        top_10_cards = hamster_client().evaluate_cards()
        print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞ –∫–∞–∂–¥—É—é –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é –º–æ–Ω–µ—Ç—É –≤—ã –ø–æ–ª—É—á–∏—Ç–µ\n"
              f"–ø—Ä–∏—Ä–æ—Å—Ç –ø—Ä–∏–±—ã–ª—å –≤ —Ä–∞–∑–º–µ—Ä–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ % –æ—Ç —Å—É–º–º—ã, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–π –Ω–∞ –ø–æ–∫—É–ø–∫—É —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏.\n")

        print(f"–¢–æ–ø 20 —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç (–ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏): \n")
        for card in top_10_cards:
            price = f"{LIGHT_YELLOW}{card['price']:,}{WHITE} ¬∑ {LIGHT_MAGENTA}+{card['profitPerHour']:,}{WHITE} –≤ —á–∞—Å ¬∑ {MAGENTA}+{card['profitPerHourDelta']:,}{WHITE} –≤ —á–∞—Å (–ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏)".replace(',', ' ')
            print(
                f"üè∑  {GREEN}{card['name']}{WHITE} ({card['id']}) ¬∑ {card['section']}\n"
                f"üí∞  {YELLOW}–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}\n"
                f"üïû  {YELLOW}–í—Ä–µ–º—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {LIGHT_GREEN}{card['payback_period']}{WHITE} (~{card['payback_days']} –¥–Ω–µ–π) \n"
                f"üìä  {YELLOW}–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏: {LIGHT_CYAN}{card['profitability_ratio']:.4f}%{WHITE}"
            )
            print("-" * 30)

    elif choice.startswith('+'):
        line_before()
        match = re.search(pattern=r'\+(.*?)$', string=choice)
        if match:
            upgrade_id = match.group(1)
            hamster_client()._buy_upgrade(upgradeId=upgrade_id)

    elif choice == 'm':
        line_before()
        main_menu()

    elif choice == '0':
        line_before()
        print("–í—ã—Ö–æ–¥")
        line_after()
        exit(1)

    elif choice == 'toggle_group':
        line_before()
        settings['send_to_group'] = not settings['send_to_group']
        save_settings(settings)
        status = '–≤–∫–ª—é—á–µ–Ω–∞' if settings['send_to_group'] else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'
        print(f'–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ –≥—Ä—É–ø–ø—É {status}')

    elif choice == 'toggle_file':
        line_before()
        settings['save_to_file'] = not settings['save_to_file']
        save_settings(settings)
        status = '–≤–∫–ª—é—á–µ–Ω–æ' if settings['save_to_file'] else '–æ—Ç–∫–ª—é—á–µ–Ω–æ'
        print(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª {status}')

    elif choice == 'toggle_apply':
        line_before()
        settings['apply_promo'] = not settings['apply_promo']
        status = '–≤–∫–ª—é—á–µ–Ω–æ' if settings['apply_promo'] else '–æ—Ç–∫–ª—é—á–µ–Ω–æ'
        save_settings(settings)
        print(f'–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {status}')

    elif choice.startswith('spinner'):
        line_before()
        spinner_name = choice.split('_')[-1]
        if spinner_name == 'list':
            print(f"\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏")
            print(spinners_table())

        elif spinner_name == 'default':
            settings['spinner'] = 'default'
            save_settings(settings)
            print(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

        else:
            settings['spinner'] = spinner_name
            save_settings(settings)
            print(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ `{spinner_name}`")

    else:
        line_before()
        print("–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç")


def handle_playground_menu_choice():
    games_data = get_games_data()['apps']
    games_prefix = {str(index + 1): game['prefix'] for index, game in enumerate(games_data)}

    while True:
        playground_menu()
        choice = input(f"\n{DARK_GRAY}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ\n{CYAN}(1/2/3/4/5/6/7/8/9/*/</0): {RESET}")
        line_before()

        if choice in games_prefix:
            generate_for_game(games_prefix[choice])
            line_after()

        elif choice == '*':
            asyncio.run(genetare_for_all_games())
            line_after()

        elif choice == '<':
            print('–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            return

        elif choice == '0':
            print("–í—ã—Ö–æ–¥")
            line_after()
            exit(1)

        else:
            print("–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç")
            line_after()


def handle_minigames_choice():
    minigames = get_games_data()['minigames']

    while True:
        minigames_menu()
        choices = [str(i + 1) for i in range(len(minigames))]
        choice = input(f"\n{DARK_GRAY}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n{CYAN}({'/'.join(choices)}/</0): {RESET}")
        line_before()

        if choice in choices:
            selected_index = int(choice) - 1
            hamster_client().complete_daily_minigame(minigames[selected_index]['title'])
            line_after()

        elif choice == '<':
            print('–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            return

        elif choice == '0':
            print("–í—ã—Ö–æ–¥")
            line_after()
            exit(1)

        else:
            print("–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç")
            line_after()
